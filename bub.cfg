###############################################################################
# Example bub configuration file.
#
# Used by 'bub-config' to establish a build directory, from which a 'bub'
# command will build your project.
#
# This file is usually located at the top level of a repository, below which
# are source directories.
#
# Before running bub-config, you need to:
# * Check out the project's source repository(s).
# * Ensure that all the project's external dependencies are available,
#   either in standard system locations or in local project-specific
#   locations.
# Bub does not verify external dependencies.
#
# If your project is built for a number of target architectures, use
# one config file for each architecture, and specify which one on the bub-config
# command-line.
#
# The modes section of each config file caters for different types of build
# within a platform, such as debug and release modes.
#
###############################################################################
#
# Top-level syntax is a series of sections, each starting with a line:
# [section-name]
#
# Comment lines begin with '#'.
#
# The syntax for each section is section-specific, and described in each
# section.
#
###############################################################################


[defines]

# Define variables.
#
# Any relative paths provided in variable definitions are relative to
# the directory this file is in, which is also the working directory
# of bub-config.
#
# A variable definition is: name = value
#
# Where value is a series of space-separated tokens, each of which can
# contain literal text and ${variable}, where variable is the name of a
# pre-defined variable. ${variable} is expanded into the variable's contents
# by bub, cross-multiplying it with whatever it is adjacent to.
# eg, if HEADERS = one two three, then -I${HEADERS} becomes -Ione -Itwo -Ithree.
# If the variable is empty, the cross-multiplication is also empty.
# If there is no adjacent text, the variable's value is used.
# Variable expansion occurs just before a build command is issued, after
# all dependencies are known.
#
# A variable pre-defined by bub is SRCDIR, which is set to the directory
# of this file, which is the same directory as bub-config is run in.
#
# Variables required by bub are:
#
#   PROJECT  - Path to directory containing the project's top-level Bubfile.
#   REPOS    - Paths to other repos (if any), below which are source
#              directories that are available to build as part of this project.
#
# Variables recommended for use in commands are:
#
#   SYS_LIB  - Non-standard paths searched for system libraries.
#   SYS_PATH - Non-standard paths searched for system utilities.
#   SYS_INC  - Non-standard paths searched for C/C++ system includes.
#   SYS_IMP  - Non-standard paths searched for D imports.
#
# Also required are build commands to convert between files of different extension.
#
# Build-command variables are used by bub to create the output files specified
# in the project's Bubfile(s). They are of the form:
#     <input-ext> <output-suffix>(s) = command
# Reserved extensions with special meaning are:
#     .obj  -> object file
#     .slib -> static library
#     .dlib -> dynamic library
#     .exe  -> executable
# The extensions actually used for these vary with platform.
# Libraries and executables are built from object files.
#
# The commands that use object files to create libraries and executables are
# specified with the extension of the source files, not .obj.
# .c source files may be mixed with other types of source files,
# but others may not. .h files are assumed to be header files.
#
# Any non-variable parts of a command that match the path of an executable or script
# built file are assumed to mean that executable or script.
# An in-project tool specified in this way is automatically added as a dependency.
# This mechanism only provides a single layer of dependency, so it is recommended
# that such tools do not themselves launch other in-house tools.
#
# Reserved variables defined by bub from information in Bubfiles are:
#
#   INPUT    - Paths of the input file(s) relative to the build dir.
#   OUTPUT   - Paths of the resultant built file(s) relative to the build dir.
#   PROJ_INC - Project include or import paths.
#   PROJ_LIB - Project library paths.
#   LIBS     - Required libraries.

# Required by bub
PROJECT  = ashd
REPOS    =

# Other paths used in commands
SYS_IMP  = ashd
SYS_INC  =
SYS_LIB  =
SYS_PATH =

# Compiler switches used in commands
COMMON     = -fpic -pedantic -Werror -Wall -Wno-long-long -Wundef -Wredundant-decls -DFILE_PATH=${INPUT}
CFLAGS     = ${COMMON}
C++FLAGS   = ${COMMON} -Woverloaded-virtual -Wsign-promo -Wctor-dtor-privacy -Wnon-virtual-dtor
DFLAGS     = -w -wi -fPIC
LINKFLAGS  =
DLINKFLAGS =

### Build commands ###

# Contrived example of source-code generation using in-project tool.
#.H   .h   = dist/bin/transmogrify ${INPUT} ${OUTPUT}
#.CPP .cpp = dist/bin/transmogrify ${INPUT} ${OUTPUT}

# Documentation: eg intro.rst generates intro.html
.rst .html = rst2html.py ${INPUT} ${OUTPUT}

# DDOC=file.ddoc


# Object files
.c   .obj = gcc -c ${INPUT} -isystem${SYS_INC} -iquote${PROJ_INC} ${CFLAGS}   -o ${OUTPUT}
.cpp .obj = g++ -c ${INPUT} -isystem${SYS_INC} -iquote${PROJ_INC} ${C++FLAGS} -o ${OUTPUT}
.d   .obj = dmd -c ${INPUT} -I${SYS_IMP}            -I${PROJ_INC} ${DFLAGS}   -of${OUTPUT}

# Static libraries
.c   .slib = ar csr ${OUTPUT} ${INPUT}
.cpp .slib = ar csr ${OUTPUT} ${INPUT}
.d   .slib = ar csr ${OUTPUT} ${INPUT}

# Dynamic libraries
.c   .dlib = gcc -shared ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l${LIBS} -o ${OUTPUT}
.cpp .dlib = g++ -shared ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l${LIBS} -o ${OUTPUT}
.d   .dlib = dmd -fPIC -L-shared ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l${LIBS} -of${OUTPUT}

# Executables
.c   .exe = gcc ${INPUT} ${LINKFLAGS}  -L${SYS_LIB}   -L${PROJ_LIB}   -l${LIBS}   -o ${OUTPUT}
.cpp .exe = g++ ${INPUT} ${LINKFLAGS}  -L${SYS_LIB}   -L${PROJ_LIB}   -l${LIBS}   -o ${OUTPUT}


.d   .exe  = dmd ${INPUT} ${DLINKFLAGS} -L-L${SYS_LIB} -L-L${PROJ_LIB} -L-l${LIBS} -of${OUTPUT}

[modes]

# For each mode, add to already-defined variables.
# Format of a mode is: the name of the mode, followed by indented
# variable additions. eg:
#
# debug
#     CFLAGS += ggdb3
#
# Exactly one mode is in use for a given build directory, and is specified
# on the bub-config command line. eg:  --mode=debug

debug
    COMMON += -O1 -ggdb3
    DFLAGS += -gc -version=DEBUG -debug=verbose -debug=10

release
    COMMON += -O2 -NDEBUG
    DFLAGS += -O  -version=RELEASE

profile
    DFLAGS += -O -profile



[syslibs]

# Define all the external libraries that the project needs to link with,
# other than those that are automatically or explicitly linked by the commands.
# These definitions allow bub to automatically determine which external libraries
# to link with, and also allow updates to external packages to force rebuilds.
#
# These libraries must be defined in dependency order (the reverse of the order
# they need to be linked in).
#
# Format is:
#   lib-names = include-names
#
# All external D imported files other than those in core and std must be listed here.
# All external C/C++ included files other than those for the standard C/C++ libraries
# must be listed here. Any angle-bracket includes not listed here will be ignored,
# with the assumption that they must be standard C/C++ includes.

#dl gtkd-2 = cairo gdk glib gtk gtkc
#sqlite3 = etc

#m       = math.h
#pthread = pthread.h
